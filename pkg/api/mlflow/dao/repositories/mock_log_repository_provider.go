// Code generated by mockery v2.34.0. DO NOT EDIT.

package repositories

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	models "github.com/G-Research/fasttrackml/pkg/api/mlflow/dao/models"

	time "time"
)

// MockLogRepositoryProvider is an autogenerated mock type for the LogRepositoryProvider type
type MockLogRepositoryProvider struct {
	mock.Mock
}

// CleanExpired provides a mock function with given fields: ctx, period
func (_m *MockLogRepositoryProvider) CleanExpired(ctx context.Context, period time.Duration) (int64, error) {
	ret := _m.Called(ctx, period)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) (int64, error)); ok {
		return rf(ctx, period)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) int64); ok {
		r0 = rf(ctx, period)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Duration) error); ok {
		r1 = rf(ctx, period)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, log
func (_m *MockLogRepositoryProvider) Create(ctx context.Context, log *models.Log) error {
	ret := _m.Called(ctx, log)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Log) error); ok {
		r0 = rf(ctx, log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDB provides a mock function with given fields:
func (_m *MockLogRepositoryProvider) GetDB() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// GetFinishedRuns provides a mock function with given fields: ctx
func (_m *MockLogRepositoryProvider) GetFinishedRuns(ctx context.Context) ([]models.Run, error) {
	ret := _m.Called(ctx)

	var r0 []models.Run
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Run, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Run); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Run)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockLogRepositoryProvider creates a new instance of MockLogRepositoryProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogRepositoryProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogRepositoryProvider {
	mock := &MockLogRepositoryProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
